[{"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\index.js":"1","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\reportWebVitals.js":"2","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\App.js":"3","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\Ticker.js":"4","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\Balance.js":"5","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\Kraken.js":"6","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\TradesHistory.js":"7","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\kraken-config.js":"8","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\kraken-secret.js":"9","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\OHLC.js":"10","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\ohlcUtils.js":"11"},{"size":601,"mtime":1617265576284,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1617265576284,"results":"14","hashOfConfig":"13"},{"size":5176,"mtime":1617881753560,"results":"15","hashOfConfig":"13"},{"size":1333,"mtime":1617808800606,"results":"16","hashOfConfig":"13"},{"size":3306,"mtime":1617700964864,"results":"17","hashOfConfig":"13"},{"size":5464,"mtime":1617881795133,"results":"18","hashOfConfig":"13"},{"size":3900,"mtime":1617727114591,"results":"19","hashOfConfig":"13"},{"size":599,"mtime":1617706956472,"results":"20","hashOfConfig":"13"},{"size":282,"mtime":1617800635399,"results":"21","hashOfConfig":"13"},{"size":7697,"mtime":1617797898562,"results":"22","hashOfConfig":"13"},{"size":525,"mtime":1617720094818,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"10y29vs",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\index.js",[],["49","50"],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\reportWebVitals.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\App.js",["51","52","53","54"],"import React, { useEffect, useState } from 'react';\r\nimport Ticker from './components/Ticker';\r\nimport Balance from './components/Balance';\r\nimport OHLC from './components/OHLC';\r\n\r\nimport './App.css';\r\nimport 'typeface-roboto';\r\nimport 'typeface-roboto-condensed';\r\n\r\nimport kraken, {ALTpairs, EURpairs } from './components/Kraken';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst App = () => {\r\n  const [currentPair, setcurrentPair] = useState('XBTEUR');\r\n  const [ticker, setTicker] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [ohlcData, setOhlcData] = useState(null);\r\n  const [tradesHistory, setTradesHistory] = useState(null);\r\n  const [autorefresh, setAutoRefresh] = useState('active');\r\n\r\n  useEffect( () => {\r\n    console.log('App - UseEffect','all');\r\n    if(autorefresh==='active') {\r\n      const timerId = setTimeout(() => {\r\n        updateTicker();\r\n      }, 5000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n\r\n  useEffect( () => {\r\n    console.log('App - UseEffect','currentPair');\r\n    updateTicker();\r\n    updateBalance();\r\n    updateOHLC();\r\n    // As we need updateTicker for manual refresh, we disable the warning for the previous line.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentPair]);\r\n\r\n  // Executed one time\r\n  useEffect( () => {\r\n    console.log('App - UseEffect','one time executed to load TradesHistory');\r\n    updateTradesHistory();\r\n    updateTicker();\r\n    updateBalance();\r\n    updateOHLC();\r\n  }, [])\r\n\r\n  const updateOHLC = async() => {  \r\n    const APIreturn = await kraken.getOHLC(currentPair,'1',null);\r\n\r\n    setOhlcData(APIreturn.data.result[ALTpairs[currentPair]]);\r\n  }\r\n\r\n  const updateTicker = async() => {  \r\n    let newTicker={\r\n      pair: currentPair,\r\n      //lastData: null,\r\n      //data: null\r\n    };\r\n\r\n    const apiReturn = await kraken.getTicker(newTicker.pair);\r\n\r\n    newTicker.data = apiReturn.data.result[ALTpairs[newTicker.pair]];\r\n\r\n    // Save the last result, before to update data\r\n    try {\r\n      newTicker.lastData = ticker.data;\r\n      newTicker.lastTradeStatus = newTicker.lastData.c[0] > newTicker.data.c[0] ? 'higher' : 'lower';\r\n    } catch {\r\n      newTicker.lastData = null;\r\n      newTicker.lastTradeStatus = 'unknow'\r\n    }\r\n\r\n    setTicker(newTicker);\r\n  }\r\n\r\n  const updateBalance = async() => {  \r\n    let apiReturn = await kraken.getBalance('');\r\n    let result = apiReturn.data.result;\r\n    let newBalance = [];\r\n\r\n    // First loop on API Balance return to prepare the newBalance\r\n    // TODO : Refactoring - Check if we can do better by using object key/value insteed Array\r\n    // Maybe by using 4 Arrays named Asset, Pair, Volume and Value\r\n    newBalance=Object.keys(result).filter(key => result[key]>=0.0001).map((key, i) => {\r\n      //console.log(\"App - updateBalance - DEBUG key=\",key)\r\n      let pair=EURpairs[key];\r\n\r\n      return [\r\n        //'asset' : \r\n        key,\r\n        //'pair' : \r\n        pair,\r\n        //'volume' :\r\n        result[key],\r\n        //'value' :\r\n        ''\r\n      ];\r\n\r\n    });\r\n\r\n    // Second loop needed because await call is not possible in lambda loop\r\n    for(let eltBalance of newBalance){\r\n      apiReturn = await kraken.getTicker(eltBalance[1]);\r\n\r\n      let thisTicker = apiReturn.data.result[ALTpairs[eltBalance[1]]];\r\n      eltBalance[3] = thisTicker.c[0];\r\n    }\r\n\r\n    setBalance(newBalance);\r\n  }\r\n\r\n  const updateTradesHistory = async() => {  \r\n    const result = await kraken.getTradesHistory();\r\n\r\n    setTradesHistory(result.data.result);\r\n  }\r\n\r\n  const sendAddOrder = async(asset, pair, type, orderType, price, volume) => {\r\n    let result = await kraken.getBalance('');\r\n    let thisBalance = result.data.result;\r\n\r\n    console.log('sendAddOrder - balance[pair]',thisBalance);\r\n    console.log('sendAddOrder - balance[pair]',thisBalance[asset]);\r\n\r\n    result = await kraken.addOrder(pair, type, orderType, price, thisBalance[asset]);\r\n    let addOrder = result.data.result;\r\n\r\n    console.log('sendAddOrder',addOrder);\r\n  }\r\n\r\n  const handleTickerClick = async() => {  \r\n    console.log('App', 'handleTickerClick');\r\n    updateTicker();\r\n  }\r\n\r\n  const handleBalanceClick = async(pair) => {\r\n    setcurrentPair(pair);\r\n    console.log('App - handleBalanceClick', pair);\r\n    //updateBalance();\r\n    //updateTicker();\r\n  }\r\n\r\n  const handleTradesHistoryClick = async() => {  \r\n    console.log('App', 'handleTradesHistoryClick');\r\n    updateTradesHistory();\r\n  }\r\n\r\n  const handleOnSell = async(pair, price, volume) => {\r\n    console.log('App', 'handleOnSell ' + pair + ' at ' + price + 'for ' + volume);\r\n  }\r\n\r\n  return (    \r\n      <div className=\"App\">\r\n        <Ticker data-testid='ticker' ticker={ticker} onClick={handleTickerClick}/>\r\n        <OHLC ohlcData={ohlcData} />\r\n        <Balance balance={balance} tradesHistory={tradesHistory} onClick={handleBalanceClick}/>\r\n        <Button variant=\"primary\" autorefresh={autorefresh} onClick={() => setAutoRefresh(autorefresh==='active'?'disable':'active')}>\r\n          {autorefresh==='active'?'Stop Auto Refresh':'Start Auto Refresh'}\r\n        </Button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\Ticker.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\Balance.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\Kraken.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\TradesHistory.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\kraken-config.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\kraken-secret.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\OHLC.js",[],"C:\\Users\\arnau\\OneDrive\\Documents\\workspaces\\krakenbot-ui\\src\\components\\ohlcUtils.js",["55"],"// ohlcUtils.js\r\n\r\nexport const dataOHLCtoDataChart = (ohlcData) => {\r\n    let result=[];\r\n    let i=0;\r\n\r\n    for(let i=0; i<ohlcData.length; i++) {\r\n        result[i]={\r\n            date: new Date(ohlcData[i][0] * 1000).toLocaleString(\"en-US\"),\r\n            open: parseFloat(ohlcData[i][1]),\r\n            high: parseFloat(ohlcData[i][2]),\r\n            low: parseFloat(ohlcData[i][3]),\r\n            close: parseFloat(ohlcData[i][4]),\r\n            volume: parseFloat(ohlcData[i][6])\r\n        }\r\n    }\r\n    return(result);\r\n }",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":47,"column":6,"nodeType":"62","endLine":47,"endColumn":8,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":120,"column":9,"nodeType":"66","messageId":"67","endLine":120,"endColumn":21},{"ruleId":"64","severity":1,"message":"68","line":145,"column":9,"nodeType":"66","messageId":"67","endLine":145,"endColumn":33},{"ruleId":"64","severity":1,"message":"69","line":150,"column":9,"nodeType":"66","messageId":"67","endLine":150,"endColumn":21},{"ruleId":"64","severity":1,"message":"70","line":5,"column":9,"nodeType":"66","messageId":"67","endLine":5,"endColumn":10},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'updateOHLC' and 'updateTicker'. Either include them or remove the dependency array.","ArrayExpression",["73"],"no-unused-vars","'sendAddOrder' is assigned a value but never used.","Identifier","unusedVar","'handleTradesHistoryClick' is assigned a value but never used.","'handleOnSell' is assigned a value but never used.","'i' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [updateOHLC, updateTicker]",{"range":"76","text":"77"},[1513,1515],"[updateOHLC, updateTicker]"]