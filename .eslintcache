[{"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/reportWebVitals.js":"1","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/index.js":"2","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/App.js":"3","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/Balance.js":"4","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/Ticker.js":"5","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/Kraken.js":"6","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/kraken-config.js":"7","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/kraken-secret.js":"8","/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/TradesHistory.js":"9"},{"size":362,"mtime":1611419877669,"results":"10","hashOfConfig":"11"},{"size":581,"mtime":1616773948467,"results":"12","hashOfConfig":"11"},{"size":4002,"mtime":1616926579981,"results":"13","hashOfConfig":"11"},{"size":1620,"mtime":1616925961818,"results":"14","hashOfConfig":"11"},{"size":1263,"mtime":1616838379325,"results":"15","hashOfConfig":"11"},{"size":5126,"mtime":1616926197453,"results":"16","hashOfConfig":"11"},{"size":558,"mtime":1615129662172,"results":"17","hashOfConfig":"11"},{"size":282,"mtime":1615052541344,"results":"18","hashOfConfig":"11"},{"size":3058,"mtime":1615134693269,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cln1dn",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/reportWebVitals.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/index.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/App.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/Balance.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/Ticker.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/Kraken.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/kraken-config.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/kraken-secret.js",[],"/Users/ARNAUD/Documents/Eclipse-workspace/krakenbot-ui/src/components/TradesHistory.js",["39"],"import React from 'react';\nimport { pairs } from './Kraken';\n\nconst getCostPrice = (pair, trades) => {\n    let avg=0.0;\n    let vol=0.0;\n    let totalCost=0.0;\n\n    const tradesArray=Object.keys(trades);\n\n    tradesArray.forEach(trade => {\n        if(trades[trade].pair===pair) {\n            if(vol===0) {\n                avg = parseFloat(trades[trade].price);\n                vol = parseFloat(trades[trade].vol);\n                totalCost = avg * vol;\n            } else {\n                vol = vol + parseFloat(trades[trade].vol) * (trades[trade].type==='buy'?1:-1);\n                totalCost = totalCost + parseFloat(trades[trade].price) * parseFloat(trades[trade].vol);\n                avg = totalCost / vol;\n            }\n        }\n    });\n\n    console.log('getCostPrice - avg', avg);\n    return({'costPrice' : avg, 'volume' : vol});\n}\n\nconst TradesHistory = props => {\n    const tradesHistory=props.tradesHistory;\n    const tradesHistoryIsNull = tradesHistory === null;\n\n    let trades=null;\n    let XXBTZEUR=0;\n    let BCHEUR=0;\n    let XDGEUR=0;\n    let XXLMZEUR=0;\n    \n    if(!tradesHistoryIsNull) {\n        trades=tradesHistory.trades;\n        XXBTZEUR = getCostPrice('XXBTZEUR', trades);\n        BCHEUR = getCostPrice('BCHEUR', trades);\n        XDGEUR = getCostPrice('XDGEUR', trades);\n        XXLMZEUR = getCostPrice('XXLMZEUR', trades);\n    }\n\n    //let trades=tradesHistory.trades;\n    console.log('tradesHistory', tradesHistory);\n\n    return (\n        <div className='TradesHistory'>\n        <span onClick={props.onClick}>resfresh</span>\n        {tradesHistoryIsNull ? (\n            <>...</>\n        ) : (\n            <>\n            <div className='TradesHistory-Count'>\n                {tradesHistory.count} trades found\n            </div>\n            Average buying cost of BTC = {XXBTZEUR.costPrice}<div className='sell' onClick={() => props.onSell('BTZ', 'BTZEUR', XXBTZEUR.costPrice*1.05, XXBTZEUR.volume)}>sell +5% ({XXBTZEUR.costPrice*1.05})</div><br/>\n            Average buying cost of BCH = {BCHEUR.costPrice}<div className='sell' onClick={() => props.onSell('BCH', 'BCHEUR', BCHEUR.costPrice*1.05, BCHEUR.volume)}>sell +5% ({BCHEUR.costPrice*1.05})</div><br/>\n            Average buying cost of XDG = {XDGEUR.costPrice}<div className='sell' onClick={() => props.onSell('XDG', 'XDGEUR', XDGEUR.costPrice*1.05, XDGEUR.volume)}>sell +5% ({XDGEUR.costPrice*1.05})</div><br/>\n            Average buying cost of XLM = {XXLMZEUR.costPrice}<div className='sell' onClick={() => props.onSell('XXLM', 'XXLMZEUR', XXLMZEUR.costPrice*1.05, XXLMZEUR.volume)}>sell +5% ({XXLMZEUR.costPrice*1.05})</div><br/>\n            {   /*\n                Object.keys(trades).map((key, i) => (\n                    <div key={i}>\n                        [{trades[key].type}] \n                        {pairs[trades[key].pair]} : \n                        {trades[key].vol} at {trades[key].price} for {trades[key].cost}\n                    </div>\n                ))*/\n\n            }\n            </>\n        )}\n        </div>\n    )\n}\n\n\nexport default TradesHistory;",{"ruleId":"40","severity":1,"message":"41","line":2,"column":10,"nodeType":"42","messageId":"43","endLine":2,"endColumn":15},"no-unused-vars","'pairs' is defined but never used.","Identifier","unusedVar"]